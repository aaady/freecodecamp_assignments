{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["QuoteText","props","id","text","QuoteAuthor","author","TweetQuote","href","className","NewQuote","onClick","this","React","Component","QuoteBox","quotes","quote","randomQuote","state","handleClick","bind","Math","floor","random","length","setState","style","textAlign","QUOTES","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4PAIA,SAASA,EAAUC,GACjB,OACI,yBAAKC,GAAG,QAAQD,EAAME,MAI5B,SAASC,EAAYH,GACnB,OACI,yBAAKC,GAAG,UAAR,KAAoBD,EAAMI,QAKhC,SAASC,IACP,OACI,uBAAGC,KAAK,kCAAkCL,GAAG,eAAc,gCAAQ,uBAAGM,UAAU,mBAArB,W,IAK3DC,E,uKAOF,OACI,4BAAQP,GAAG,YAAYQ,QAAUC,KAAKV,MAAMS,SAA5C,iB,GAReE,IAAMC,WAevBC,E,kDACJ,WAAYb,GAAQ,IAAD,uBACjB,cAAMA,IAEDc,OAAS,EAAKd,MAAMc,OACzB,IAAMC,EAAQ,EAAKC,cAJF,OAKjB,EAAKC,MAAQ,CACXf,KAAMa,EAAMb,KACZE,OAAQW,EAAMX,QAPC,E,gEAcjBM,KAAKQ,cACLR,KAAKQ,YAAcR,KAAKQ,YAAYC,KAAKT,Q,oCAKzC,OAAOA,KAAKI,OAAOM,KAAKC,MAAMD,KAAKE,SAAWZ,KAAKI,OAAOS,W,oCAO1D,IAAMR,EAAQL,KAAKM,cACnBN,KAAKc,SAAS,CACZtB,KAAMa,EAAMb,KACZE,OAAQW,EAAMX,W,+BAahB,OACE,yBAAKH,GAAG,YAAYwB,MANP,CACbC,UAAW,WAMT,kBAAC3B,EAAD,CAAWG,KAAMQ,KAAKO,MAAMf,OAC5B,kBAACC,EAAD,CAAaC,OAAQM,KAAKO,MAAMb,SAChC,kBAACC,EAAD,MACA,kBAAC,EAAD,CAAUI,QAASC,KAAKQ,mB,GAjDTP,IAAMC,WA6D7B,IAAMe,EAAS,CACb,CAAC,KAAQ,mEAAoE,OAAU,aACvF,CAAC,KAAQ,8CAA+C,OAAU,kBAClE,CAAC,KAAQ,2DAA4D,OAAU,eAC/E,CAAC,KAAQ,0DAA2D,OAAU,iBAC9E,CAAC,KAAQ,kDAAmD,OAAU,cACtE,CAAC,KAAQ,oEAAqE,OAAU,WACxF,CAAC,KAAQ,6EAA8E,OAAU,uBACjG,CAAC,KAAQ,0KAA2K,OAAU,mBAC9L,CAAC,KAAQ,6DAA8D,OAAU,eACjF,CAAC,KAAQ,qDAAsD,OAAU,gBAG5DC,EAnBf,WACE,OACI,kBAAC,EAAD,CAAUd,OAAQa,KCpFJE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.6ba68c02.chunk.js","sourcesContent":["import React, { useImperativeHandle } from 'react';\n// import logo from './logo.svg';\nimport './App.css';\n\nfunction QuoteText(props) {\n  return(\n      <div id=\"text\">{props.text}</div>\n  )\n}\n\nfunction QuoteAuthor(props) {  \n  return(\n      <div id=\"author\">- {props.author}</div>\n  );\n}\n\n// /* <button style='font-size:24px'>Button <i class='fab fa-twitter'></i></button> */\nfunction TweetQuote() {\n  return(\n      <a href=\"http://twitter.com/intent/tweet\" id=\"tweet-quote\"><button><i className='fab fa-twitter'></i> Tweet</button></a>\n\n  )\n}\n\nclass NewQuote extends React.Component {\n  // constructor(props) {\n  //   super(props);\n  //   // this.onClick = this.onClick.bind(this);\n  // }\n\n  render() {\n    return (\n        <button id=\"new-quote\" onClick= {this.props.onClick}>\n          New Quote\n        </button>\n    )\n  }\n}\n\nclass QuoteBox extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.quotes = this.props.quotes;\n    const quote = this.randomQuote();\n    this.state = {\n      text: quote.text,\n      author: quote.author\n    }\n    // this.handleClick();\n    // this.handleClick = this.handleClick.bind(this);\n  }\n\n  componentDidMount(){\n    this.handleClick();\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  // 続けて同じモノが出される場合がある\n  randomQuote() {\n    return this.quotes[Math.floor(Math.random() * this.quotes.length)];\n    // const quotes = this.props.quotes;\n    // return quotes[Math.floor(Math.random() * quotes.length)];\n  }\n\n  handleClick() {\n    // alert(123);\n    const quote = this.randomQuote();\n    this.setState({\n      text: quote.text,\n      author: quote.author\n    });\n  }\n\n  render() {\n    // console.log(this.randomQuote());\n    // const quote = this.randomQuote();\n    // console.log(quote.text, quote.author)\n    let boxStyle = {\n      textAlign: 'center'\n    };\n\n\n    return (\n      <div id=\"quote-box\" style={boxStyle}>\n        <QuoteText text={this.state.text} />\n        <QuoteAuthor author={this.state.author} />\n        <TweetQuote />\n        <NewQuote onClick={this.handleClick} />\n      </div>\n    );\n  }\n}\n\nfunction App() {\n  return (\n      <QuoteBox quotes={QUOTES} />\n  );\n}\n\nconst QUOTES = [\n  {\"text\": \"It does not matter how slowly you go as long as you do not stop.\", \"author\": \"Confucius\"},\n  {\"text\": \"It always seems impossible until it's done.\", \"author\": \"Nelson Mandela\"},\n  {\"text\": \"Start where you are. Use what you have. Do what you can.\", \"author\": \"Arthur Ashe\"},\n  {\"text\": \"Failure is the condiment that gives success its flavor.\", \"author\": \"Truman Capote\"},\n  {\"text\": \"The secret of getting ahead is getting started.\", \"author\": \"Mark Twain\"},\n  {\"text\": \"A good traveler has no fixed plans and is not intent on arriving.\", \"author\": \"Lao Tzu\"},\n  {\"text\": \"The only person you are destined to become is the person you decide to be.\", \"author\": \"Ralph Waldo Emerson\"},\n  {\"text\": \"Whether you want to uncover the secrets of the universe, or you want to pursue a career in the 21st century, basic computer programming is an essential skill to learn.\", \"author\": \"Stephen Hawking\"},\n  {\"text\": \"The way to get started is to quit talking and begin doing.\", \"author\": \"Walt Disney\"},\n  {\"text\": \"We first make our habits, then our habits make us.\", \"author\": \"John Dryden\"}\n];\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}