{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["data1","keyCode","keyTrigger","id","url","Display","props","audio","React","createRef","playSound","bind","event","this","current","play","updateDisplay","data","className","onClick","onKeyDown","playSoundByKey","tabIndex","ref","src","Component","DrumMachine","handleKeydown","e","index","findIndex","el","refArr","name","setState","display","state","String","fromCharCode","forEach","document","addEventListener","window","focus","removeEventListener","map","key","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6OAKMA,G,MAAQ,CAAC,CACXC,QAAS,GACTC,WAAY,IACZC,GAAI,WACJC,IAAK,4DACJ,CACDH,QAAS,GACTC,WAAY,IACZC,GAAI,WACJC,IAAK,4DACJ,CACDH,QAAS,GACTC,WAAY,IACZC,GAAI,WACJC,IAAK,4DACJ,CACDH,QAAS,GACTC,WAAY,IACZC,GAAI,WACJC,IAAK,8DACJ,CACDH,QAAS,GACTC,WAAY,IACZC,GAAI,OACJC,IAAK,4DACJ,CACDH,QAAS,GACTC,WAAY,IACZC,GAAI,UACJC,IAAK,0DACJ,CACDH,QAAS,GACTC,WAAY,IACZC,GAAI,cACJC,IAAK,8DACJ,CACDH,QAAS,GACTC,WAAY,IACZC,GAAI,OACJC,IAAK,8DACJ,CACDH,QAAS,GACTC,WAAY,IACZC,GAAI,YACJC,IAAK,4DAGHC,E,kDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQC,IAAMC,YACnB,EAAKC,UAAY,EAAKA,UAAUC,KAAf,gBAHA,E,sDAMTC,GAERC,KAAKN,MAAMO,QAAQC,OAEnBF,KAAKP,MAAMU,cAAcH,KAAKP,MAAMW,KAAKd,M,+BAKzC,OACE,yBAAKA,GAAIU,KAAKP,MAAMW,KAAKd,GAAIe,UAAU,WAAWC,QAASN,KAAKH,UAAYU,UAAWP,KAAKQ,eAAgBC,SAAS,MAClHT,KAAKP,MAAMW,KAAKf,WACjB,2BAAOqB,IAAKV,KAAKN,MAAOJ,GAAIU,KAAKP,MAAMW,KAAKf,WAAYgB,UAAU,OAAOM,IAAKX,KAAKP,MAAMW,KAAKb,KAA9F,qCAAqI,uCAArI,kB,GAnBcI,IAAMiB,WAyBtBC,E,kDACJ,WAAYpB,GAAQ,IAAD,8BACjB,cAAMA,IAsBVqB,cAAgB,SAAAC,GACd,IAAMC,EAAQ7B,EAAM8B,WAAU,SAAAC,GAAE,OAAKA,EAAG9B,UAAY2B,EAAE3B,WAClD4B,GAAS,GAAG,EAAKG,OAAOH,GAAOf,QAAQJ,aAzBxB,EA4BrBM,cAAgB,SAAAiB,GACd,EAAKC,SAAS,CACZC,QAASF,KA3BT,EAAKG,MAAQ,CACXD,QAASE,OAAOC,aAAa,MAG/B,EAAKN,OAAS,GACdhC,EAAMuC,SAAQ,SAACR,EAAIF,GAEjB,EAAKG,OAAOH,GAASrB,IAAMC,eAVZ,E,gEAejB+B,SAASC,iBAAiB,UAAW5B,KAAKc,eAC9Ce,OAAOC,U,6CAIPH,SAASI,oBAAoB,UAAW/B,KAAKc,iB,+BAuBjC,IAAD,OACP,OACE,yBAAKxB,GAAG,gBACN,yBAAKA,GAAG,WACLU,KAAKuB,MAAMD,QACZ,6BACCnC,EAAM6C,KAAI,SAACd,EAAIF,GAAL,OACT,kBAAC,EAAD,CAASZ,KAAMc,EAAIe,IAAKf,EAAG5B,GAAIoB,IAAK,EAAKS,OAAOH,GAAQb,cAAe,EAAKA,yB,GAnD9DR,IAAMiB,WAiEjBsB,MANf,WACE,OACE,kBAAC,EAAD,OC9HgBC,QACW,cAA7BN,OAAOO,SAASC,UAEe,UAA7BR,OAAOO,SAASC,UAEhBR,OAAOO,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFd,SAASe,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.af73f59f.chunk.js","sourcesContent":["import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\n// import ReactAudioPlayer from 'react-audio-player';\n\nconst data1 = [{\n    keyCode: 81,\n    keyTrigger: 'Q',\n    id: 'Heater-1',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-1.mp3'\n  }, {\n    keyCode: 87,\n    keyTrigger: 'W',\n    id: 'Heater-2',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-2.mp3'\n  }, {\n    keyCode: 69,\n    keyTrigger: 'E',\n    id: 'Heater-3',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-3.mp3'\n  }, {\n    keyCode: 65,\n    keyTrigger: 'A',\n    id: 'Heater-4',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-4_1.mp3'\n  }, {\n    keyCode: 83,\n    keyTrigger: 'S',\n    id: 'Clap',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-6.mp3'\n  }, {\n    keyCode: 68,\n    keyTrigger: 'D',\n    id: 'Open-HH',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Dsc_Oh.mp3'\n  }, {\n    keyCode: 90,\n    keyTrigger: 'Z',\n    id: \"Kick-n'-Hat\",\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Kick_n_Hat.mp3'\n  }, {\n    keyCode: 88,\n    keyTrigger: 'X',\n    id: 'Kick',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/RP4_KICK_1.mp3'\n  }, {\n    keyCode: 67,\n    keyTrigger: 'C',\n    id: 'Closed-HH',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Cev_H2.mp3'\n}];\n\nclass Display extends React.Component {\n  constructor(props) {\n    super(props);\n    this.audio = React.createRef();\n    this.playSound = this.playSound.bind(this);\n  }\n\n  playSound(event) {\n    // const sound = document.getElementById(this.props)\n    this.audio.current.play();\n    // console.log(this.audio)\n    this.props.updateDisplay(this.props.data.id)\n  }\n\n  render() {\n    // const {} = \n    return(\n      <div id={this.props.data.id} className=\"drum-pad\" onClick={this.playSound}  onKeyDown={this.playSoundByKey} tabIndex='-1'>\n        {this.props.data.keyTrigger}\n        <audio ref={this.audio} id={this.props.data.keyTrigger} className=\"clip\" src={this.props.data.url}>Your browser does not support the <code>audio</code> element.</audio>\n      </div>\n    )\n  }\n}\n\nclass DrumMachine extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      display: String.fromCharCode(160),\n    }\n    // \n    this.refArr = [];\n    data1.forEach((el, index) => {\n      // this.refArr.push(React.createRef())\n      this.refArr[index] = React.createRef()\n    })\n  }\n\n  componentDidMount() {\n    document.addEventListener('keydown', this.handleKeydown)\nwindow.focus()\n}\n\ncomponentWillUnmount() {\ndocument.removeEventListener('keydown', this.handleKeydown)\n}\n\nhandleKeydown = e => {\n  const index = data1.findIndex(el => (el.keyCode === e.keyCode));\n  if (index >= 0) this.refArr[index].current.playSound();\n}\n\nupdateDisplay = name => {\n  this.setState({\n    display: name\n  });\n}\n\n// func = (index) => {\n//   console.log(data1.forEach((val, index) => {\n//     this.refArr[index] = React.createRef();\n// }))\n//   //  this.refArr[index] = React.createRef();\n//   return this.refArr[index] = React.createRef();\n// }\n\n\n  render() {\n    return(\n      <div id=\"drum-machine\">\n        <div id=\"display\">\n          {this.state.display}\n          <br />\n          {data1.map((el, index)=>(\n            <Display data={el} key={el.id} ref={this.refArr[index]} updateDisplay={this.updateDisplay} />\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction App() {\n  return (\n    <DrumMachine />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}