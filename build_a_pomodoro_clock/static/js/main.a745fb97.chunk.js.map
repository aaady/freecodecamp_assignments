{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["SetTimer","props","id","title","toLowerCase","className","this","onClick","handleDecrease","count","handleIncrease","React","Component","App","handlePlayPause","state","isPlaying","clearInterval","loop","setState","setInterval","clockCount","currentTimer","breakCount","sessionCount","audioElement","current","play","handleReset","pause","currentTime","convertTime","minutes","Math","floor","seconds","handleBreakDecrease","handleBreakIncrease","handleSessionDecrease","handleSessionIncrease","undefined","createRef","breakProps","sessionProps","preload","ref","src","type","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a745fb97.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass SetTimer extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.id = props.title.toLowerCase()\n  }\n\n  render() {\n    return(\n      <div className=\"timer-container\">\n        <h2 id={`${this.id}-label`}>{this.props.title} Length</h2>\n        <div className=\"length-control\">\n          <button id={`${this.id}-decrement`} className=\"btn-level\" onClick={this.props.handleDecrease}>\n            <i className=\"fas fa-minus\" />\n          </button>\n\n          <span id={`${this.id}-length`} className=\"time-length\">{this.props.count}</span>\n\n          <button id={`${this.id}-increment`} className=\"btn-level\" onClick={this.props.handleIncrease}>\n            <i className=\"fas fa-plus\" />\n          </button>\n        </div>\n      </div>\n    )\n  }\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.loop = undefined;\n\n    this.state = {\n      breakCount: 5,        //5\n      sessionCount: 25,     //25\n      clockCount: 25 * 60,  //25 * 60\n      currentTimer: 'Session',\n      isPlaying: false\n    }\n\n    this.audioElement = React.createRef()\n    // this.myRef = React.createRef();\n  }\n\n  handlePlayPause = () => {\n    const {isPlaying} = this.state\n\n    if(isPlaying) {\n      clearInterval(this.loop)\n\n      this.setState({\n        isPlaying: false\n      })\n    } else {\n      this.setState({\n        isPlaying: true\n      })\n      \n      this.loop = setInterval(() => {\n        const {\n          clockCount, \n          currentTimer, \n          breakCount, \n          sessionCount\n        } = this.state\n\n        if(clockCount === 0) {\n          this.setState({\n            currentTimer: currentTimer === 'Session' ? 'Break' : 'Session',\n            clockCount: (currentTimer === 'Session') ? (breakCount * 60) : (sessionCount * 60)\n          })\n\n          this.audioElement.current.play()\n        } else {\n          this.setState({\n            clockCount: clockCount - 1\n          })\n        }\n      }, 1000) //1000\n    }\n  }\n\n  handleReset = () => {\n    this.setState({\n      breakCount: 5,        //5\n      sessionCount: 25,     //25\n      clockCount: 25 * 60,  //25 * 60\n      currentTimer: 'Session',\n      isPlaying: false\n    })\n\n    clearInterval(this.loop)\n\n    this.audioElement.current.pause()\n    this.audioElement.current.currentTime = 0\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.loop)\n  }\n\n  // Formatting time\n  convertTime = (count) => {\n    let minutes = Math.floor(count / 60);\n    let seconds = count % 60;\n    \n    minutes = minutes < 10 ? ('0' + minutes) : minutes\n    seconds = seconds < 10 ? ('0' + seconds) : seconds\n\n    return `${minutes}:${seconds}`\n  }\n\n  handleBreakDecrease = () => {\n    const {breakCount, isPlaying, currentTimer} = this.state\n\n    if(breakCount > 1) {\n      if(!isPlaying && currentTimer === 'Break') {\n        this.setState({\n          breakCount: breakCount - 1,\n          clockCount: (breakCount - 1) * 60\n        })\n      } else {\n        this.setState({\n          breakCount: breakCount - 1\n        })\n      }\n    }\n  }\n\n  handleBreakIncrease = () => {\n    const {breakCount, isPlaying, currentTimer} = this.state\n\n    if(breakCount < 60) {\n      if(!isPlaying && currentTimer === 'Break') {\n        this.setState({\n          breakCount: breakCount + 1,\n          clockCount: (breakCount + 1) * 60\n        })\n      } else {\n        this.setState({\n          breakCount: breakCount + 1\n        })\n      }\n    }\n  }\n\n  handleSessionDecrease = () => {\n    const {sessionCount, isPlaying, currentTimer} = this.state\n\n    if(sessionCount > 1) {\n      if(!isPlaying && currentTimer === 'Session') {\n        this.setState({\n          sessionCount: sessionCount - 1,\n          clockCount: (sessionCount - 1) * 60\n        })\n      } else {\n        this.setState({\n          sessionCount: sessionCount - 1\n        })\n      }\n    }\n  }\n\n  handleSessionIncrease = () => {\n    const {sessionCount, isPlaying, currentTimer} = this.state\n\n    if(sessionCount < 60) {\n      if(!isPlaying && currentTimer === 'Session') {\n        this.setState({\n          sessionCount: sessionCount + 1,\n          clockCount: (sessionCount + 1) * 60\n        })\n      } else {\n        this.setState({\n          sessionCount: sessionCount + 1\n        })\n      }\n    }\n  }\n\n  render() {\n    const {\n      breakCount, \n      sessionCount,\n      clockCount,\n      currentTimer,\n      isPlaying\n    } = this.state\n\n    const breakProps = {\n      title: 'Break', \n      count:  breakCount,\n      handleDecrease:  this.handleBreakDecrease, \n      handleIncrease:  this.handleBreakIncrease\n    }\n\n    const sessionProps = {\n      title: 'Session', \n      count:  sessionCount,\n      handleDecrease:  this.handleSessionDecrease, \n      handleIncrease:  this.handleSessionIncrease\n    }\n\n    return (\n      <div id=\"container\">\n      <div className=\"App\">\n        <div className=\"main-title\">Pomodoro Clock</div>\n        <div className=\"lengths\">\n          <SetTimer {...breakProps} />\n          <SetTimer {...sessionProps} />\n        </div>\n\n        <div className=\"clock-container\">\n          <h1 id=\"timer-label\">{currentTimer}</h1>\n          <span id=\"time-left\">{this.convertTime(clockCount)}</span>\n\n          <audio id=\"beep\" preload=\"auto\" ref={this.audioElement}>\n            <source src=\"https://smartomaizu.com/ringtones/data/su1014.mp3\" type=\"audio/mp3\" />\n          </audio>\n\n          <div className=\"flex\">\n            <button id=\"start_stop\" onClick={this.handlePlayPause}>\n              <i className={`fas fa-${isPlaying ? 'pause': 'play'}`} />\n            </button>\n            <button id=\"reset\" onClick={this.handleReset}>\n              <i className=\"fas fa-sync\" />\n            </button>\n          </div>\n        </div>\n      </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}