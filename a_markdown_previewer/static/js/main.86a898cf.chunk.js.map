{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["MarkdownPreviewer","props","state","content","inputHandler","bind","event","this","setState","target","value","console","log","html","marked","replace","className","title","type","id","rows","cols","onChange","dangerouslySetInnerHTML","__html","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wPASMA,E,kDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,MAAQ,CACXC,QAAQ,4nIA+FV,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBAnGH,E,yDAsGNC,GACXC,KAAKC,SAAS,CACZL,QAASG,EAAMG,OAAOC,QAExBC,QAAQC,IAAIN,EAAMG,OAAOC,S,+BAKzB,IAAIG,EAAOC,IAAOP,KAAKL,MAAMC,QAAQY,QAAQ,cAAe,WAE5D,OACE,yBAAKC,UAAU,OACb,yBAAKA,UAAU,cACb,yBAAKA,UAAU,WACb,uBAAGC,MAAM,oBAAoBD,UAAU,yBADzC,UAGA,8BAAUE,KAAK,WAAWC,GAAG,SAASC,KAAK,KAAKC,KAAK,KAAKC,SAAUf,KAAKH,aAAcM,MAAOH,KAAKL,MAAMC,WAE3G,yBAAKa,UAAU,cACf,yBAAKA,UAAU,eACb,yBAAKA,UAAU,WACb,uBAAGC,MAAM,oBAAoBD,UAAU,yBADzC,aAGA,yBAAKG,GAAG,UAAUI,wBAAyB,CAACC,OAAQX,W,GA/H9BY,IAAMC,WA+IvBC,MAPf,WACE,OACE,kBAAC,EAAD,OCvIgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlC,QAAQkC,MAAMA,EAAMC,a","file":"static/js/main.86a898cf.chunk.js","sourcesContent":["import React from 'react';\n// import { render } from '@testing-library/react';\n// import logo from './logo.svg';\n// import './App.css';\n\n// var React = require('react');\nimport marked from 'marked';\n// var marked = require('marked');\n\nclass MarkdownPreviewer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      content: \n`# h1見出し\n\n## h2見出し\n\n### h3見出し\n\n\n直接リンク\nhoge [example](http://example.com \"title\")\n[example](http://example.com)\n\n参照リンク\nhoge [example][id]\n[id]: http://example.com \"title\"\n\n自動リンク\n<http://example.com>\n\n\nインラインコード\n\\`バッククオート\\` で単語を囲むとインラインコードになります。\n\n\nCode コード\n\\`\\`\\`バッククオート\\`\\`\\` 3つ、あるいはダッシュ~３つで囲みます。\n\nprint 'hoge'\n\n\nUl 箇条書きリスト\nハイフン-、プラス+、アスタリスク*のいずれかを先頭に記述します。\nネストはタブで表現します。\n\n- リスト1\n    - リスト1_1\n        - リスト1_1_1\n        - リスト1_1_2\n    - リスト1_2\n- リスト2\n- リスト3\n\nOl 番号付きリスト\n番号.を先頭に記述します。ネストはタブで表現します。\n番号は自動的に採番されるため、すべての行を1.と記述するのがお勧めです。\n\n1. 番号付きリスト1\n    1. 番号付きリスト1-1\n    1. 番号付きリスト1-2\n1. 番号付きリスト2\n1. 番号付きリスト3\n\n\nBlockquotes 引用\n先頭に>を記述します。ネストは>を多重に記述します。\n\n> 引用  \n> 引用\n>> 多重引用\n\n\nImages 画像\n直接リンク（画像）\n![Alt text](./twitter.png \"title\")\nMarkdownでは画像リンクの際に大きさを指定できません。もし使用したい場合は<img>タグを使用してください。\n<img src=\"./blue_bird.jpg\" alt=\"attach:blue_bird\" title=\"attach:blue_bird\" width=\"292\" height=\"196\">\n\n\nstrong\nアスタリスク*もしくはアンダースコア_2個で文字列を囲みます。\n\nこれは **ボールド** です\nこれは __ボールド__ です\n\n\n\nソースコード表現（コードブロック）\nプログラムのソースコードなどをそのまま表示したい場合に使用します。これが書かれた範囲は、通常の文章による段落とは異なり書かれた通りに解釈されます。\n\nMarkdownでコードブロックを書くには単純に各行の冒頭に4つ以上のスペースもしくは1つ以上のタブを挿入します。\n\n  これは行頭にタブがいます\n    これは行頭にスペースがいます\n\n\n    // this is multi-line code:\n    \n    function anotherExample(firstLine, lastLine) {\n      if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\n        return multiLineCode;\n      }\n    }\n\n`\n    }\n    this.inputHandler = this.inputHandler.bind(this);\n  }\n\n  inputHandler(event) {\n    this.setState({\n      content: event.target.value\n    })\n    console.log(event.target.value)\n  }\n\n  render() {\n    // var html = marked(this.state.content.replace(/\\r?\\n/g, '  \\r\\n'));\n    var html = marked(this.state.content.replace(/\\n|\\r\\n|\\r/g, '  \\r\\n'));\n    \n    return(\n      <div className=\"App\">\n        <div className=\"editorWrap\">\n          <div className=\"toolbar\">\n            <i title=\"no-stack-dub-sack\" className=\"fa fa-free-code-camp\"></i>Editor\n          </div>\n          <textarea type=\"textarea\" id=\"editor\" rows=\"10\" cols=\"80\" onChange={this.inputHandler} value={this.state.content} />\n        </div>\n        <div className=\"converter\"></div>\n        <div className=\"previewWrap\">\n          <div className=\"toolbar\">\n            <i title=\"no-stack-dub-sack\" className=\"fa fa-free-code-camp\"></i>Previewer\n          </div>\n          <div id=\"preview\" dangerouslySetInnerHTML={{__html: html}}></div>\n        </div>\n      </div>\n\n      \n    );\n  }\n}\n\nfunction App() {\n  return (\n    <MarkdownPreviewer />\n    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}